p
p <- ggplot(data, aes(x=table(HAPPY), y=table(MARITAL))) + geom_bar(stat="count") + scale_x_continuous() + scale_y_continuous()
p
p <- ggplot(data, aes(x=HAPPY, y=MARITAL)) + geom_bar(stat="count") + scale_x_continuous() + scale_y_continuous()
p
p
p <- ggplot(data, aes(x=HAPPY, y=MARITAL)) + geom_bar(stat="count") + scale_x_discrete() + scale_y_discrete()
p
data <- HAPPY[!is.na(HAPPY$AGE),]
rm(p)
p <- ggplot(data, aes(x=table(AGE), y=HAPPY, fill=HAPPY)) + geom_boxplot()
P
p
p <- ggplot(data, aes(x=factor(AGE), y=HAPPY, fill=HAPPY)) + geom_boxplot()
p
p <- ggplot(data, aes(x=AGE, y=HAPPY, fill=HAPPY)) + geom_boxplot()
p
p <- ggplot(data, aes(x=HAPPY, y=AGE, fill=AGE)) + geom_boxplot()
p
p <- ggplot(data, aes(x=HAPPY, y=AGE, color=HAPPY)) + geom_boxplot()
p
p <- ggplot(data, aes(x=HAPPY, y=table(AGE), color=HAPPY)) + geom_boxplot()
p
table(AGE)
table(data$AGE)
ages <- table(data$AGE)
p <- ggplot(data, aes(x=HAPPY, y=ages, color=HAPPY)) + geom_boxplot()
p
head(data)
data$AGE <- as.factor(data$AGE)
p <- ggplot(data, aes(x=AGE, y=HAPPY)) + geom_boxplot()
p
p <- ggplot(data, aes(x=HAPPY, y=AGE))
p + geom_boxplot()
data$DEGREE <- as.factor(data$DEGREE)
p <- ggplot(data, aes(x=HAPPY, y=DEGREE))
p + geom_boxplot()
p + geom_violin()
p <- ggplot(data, aes(x=table(HAPPY), y=table(DEGREE)))
p + geom_violin()
p <- ggplot(data, aes(x=factor(HAPPY), y=factor(DEGREE)))
p
p + geom_violin()
rm(p)
head(data)
data <- HAPPY[!is.na(HAPPY$SEX),] # Do not want to show NA values here
p <- ggplot(data, aes(x=SEX, y=HAPPY))
p <- geom_bar()
p
p <- geom_bar(stat="identity")
p
p <- ggplot(data, aes(x=SEX, y=table(HAPPY)) + geom_bar()
p <- ggplot(data, aes(x=SEX, y=table(HAPPY))) + geom_bar()
p
p <- ggplot(data, aes(x=SEX, y=factor(HAPPY))) + geom_bar()
p
p <- ggplot(data, aes(x=SEX, y=factor(HAPPY)))
p
p <- ggplot(data, aes(x=SEX, y=count(data, HAPPY)))
p
p <- ggplot(data, aes(x=SEX, y=HAPPY))
p
rm(p)
head(data)
table(data$HEALTH)
p <- ggplot(data, aes(x=HEALTH, y=HAPPY))
p
p + geom_histogram
p + geom_histogram()
p
rm(p)
p <- ggplot(data, aes(x=HAPPY))
p + geom_histogram(
)
p <- ggplot(data, aes(x=table(HAPPY))
)
p + geom_histogram()
p <- ggplot(data, aes(x=factor(HAPPY)))
p + geom_histogram()
p <- ggplot(data, aes(x=HEALTH, y=HAPPY$HAPPY))
p + geom_bar()
p <- ggplot(data, aes(x=HAPPY, y=table(HAPPY), fill=SEX)) + geom_bar(stat="identity")
p
p <- ggplot(data, aes(x=HAPPY, y=HAPPY, fill=SEX)) + geom_bar(stat="identity")
p
p <- p + ylab("Sex") + theme(axis.text.y=element_blank()) + xlab("Happiness Level")
p
p <- p + ylab("Count (by Sex)") + theme(axis.text.y=element_blank()) + xlab("Happiness Level")
p
p <- p + ggtitle("Happiness Level by Sex") + theme(plot.title = element_text(hjust=0.5))
p
p <- p + coord_flip(
)
p
rm(p)
head(data)
data <- HAPPY[!is.na(HAPPY$DEGREE),] # Do not want to show NA values here
p <- ggplot(data, aes(x=HAPPY, y=HAPPY, fill=DEGREE)) + geom_bar(stat="identity")
p <- p + ylab("Count (by Sex)") + theme(axis.text.y=element_blank()) + xlab("Happiness Level")
p <- p + ggtitle("Happiness Level by Degree") + theme(plot.title = element_text(hjust=0.5))
p
data <- HAPPY[!is.na(HAPPY$DEGREE),] # Do not want to show NA values here
p <- ggplot(data, aes(x=HAPPY, y=HAPPY, fill=DEGREE)) + geom_bar(stat="identity")
p <- p + ylab("Count (by Degree)") + theme(axis.text.y=element_blank()) + xlab("Happiness Level")
p <- p + ggtitle("Happiness Level by Degree") + theme(plot.title = element_text(hjust=0.5))
p
data <- HAPPY[!is.na(HAPPY$DEGREE),] # Do not want to show NA values here
p <- ggplot(data, aes(x=HAPPY, y=HAPPY, fill=DEGREE)) + geom_bar(stat="identity") + coord_flip()
p <- p + ylab("Count (by Degree)") + theme(axis.text.y=element_blank()) + xlab("Happiness Level")
p <- p + ggtitle("Happiness Level by Degree") + theme(plot.title = element_text(hjust=0.5))
p
data <- HAPPY[!is.na(HAPPY$DEGREE),] # Do not want to show NA values here
p <- ggplot(data, aes(x=HAPPY, y=HAPPY, fill=DEGREE)) + geom_bar(stat="identity") + coord_flip()
p <- p + ylab("Count (by Degree)") + theme(axis.text.x=element_blank()) + xlab("Happiness Level")
p <- p + ggtitle("Happiness Level by Degree") + theme(plot.title = element_text(hjust=0.5))
p
install.packages("datasets")
datasets
library("datasets")
ChickWeight
data <- ChickWeight
head(data, 5)
?ChickWeight
library("dplyr")
weight0 <- data.frame("NumChicks", "AvgWeight", "WeightStD")
weight0
weight0 <- data.frame("NumChicks" = "", "AvgWeight" = "", "WeightStD" = "")
weight0
rm(weight0)
by_diet <- data %>% group_by(Diet)
head(by_diet, 5)
summarize(by_diet)
head(data, 5)
head(data, 12)
head(data, 20)
head(data, 25)
weight0
data %>% add_count(Diet, Chick)
rm(data)
data %>% ChickWeight
data <- ChickWeight
data %>% group_by(Diet) %>% summarise(n = n()/12)
rm(data)
data <- ChickWeight
temp <- data
temp %>% group_by(Diet) %>% summarise(NumChicks = n())
head(data, 13)
head(data, 25)
head(data, 100)
weight0 <- data
weight0 %>% group_by(Diet) %>% summarise(NumChicks = n()%/%12, AvgWeight = mean(weight, na.rm=TRUE), WeightStDev = sd(weight))
weight0 %>% group_by(Diet) %>% summarise(NumChicks = n()%/%12, AvgWeight = mean(weight), WeightStDev = sd(weight))
weight0
weight0 <- data %>% group_by(Diet) %>% summarise(NumChicks = n()%/%12, AvgWeight = mean(weight), WeightStDev = sd(weight))
weight0
head(data, 5)
data <- data %>% group_by(Chick)
data <- data %>% group_by(Chick) %>% summarise(NumMeasures = n())
data
rm(data)
data <- ChickWeight
temp <- data %>% group_by(Chick) %>% mutate(NumMeasures = n())
head(temp, 5)
complete <- temp[temp$NumMeasures == 12]
complete <- temp[temp$NumMeasures == 12,]
complete
temp <- complete
temp %>% arrange(NumMeasures)
temp %>% arrange(desc(Chick))
temp <- data %>% group_by(Chick) %>% mutate(NumMeasures = n(weight))
temp <- data %>% group_by(Chick, weight) %>% mutate(NumMeasures = n())
temp
temp <- data %>% group_by(Chick) %>% mutate(NumMeasures = n())
complete
complete %>% select(weight:Diet)
complete
complete <- complete %>% select(weight:Diet)
head(complete, 5)
temp <- complete
temp <- complete %>% group_by(Chick) %>% mutate(weightgain = (weight - weight[Time == 0])
)
temp
head(complete, 13)
complete <- complete %>% group_by(Chick) %>% mutate(weightgain = (weight - weight[Time == 0]))
head(complete, 13)
p <- ggplot(complete, aes(x=Diet, y=weightgain)) + geom_boxplot()
library("ggplot2")
p <- ggplot(complete, aes(x=Diet, y=weightgain)) + geom_boxplot()
p
p <- ggplot(complete, aes(x=Diet, y=weightgain)) + geom_boxplot() + expand_limits(y=0)
p
p <- ggplot(complete, aes(x=reorder(Diet, weightgain, FUN = median), y=weightgain)) + geom_boxplot() + expand_limits(y=0)
p
p <- ggplot(complete, aes(x=reorder(Diet, weightgain[weightgain == 21], FUN = median), y=weightgain)) + geom_boxplot() + expand_limits(y=0)
p
p <- ggplot(complete, aes(x=reorder(Diet, weightgain[Time == 21], FUN = median), y=weightgain)) + geom_boxplot() + expand_limits(y=0)
p
p <- ggplot(complete, aes(x=reorder(Diet[Time==21], weightgain[Time==21], FUN = median), y=weightgain)) + geom_boxplot() + expand_limits(y=0)
p
p <- ggplot(complete[Time==21], aes(x=reorder(Diet[Time==21], weightgain[Time==21], FUN = median), y=weightgain)) + geom_boxplot() + expand_limits(y=0)
p <- ggplot(complete[Time==21], aes(x=reorder(Diet[Time==21], weightgain[Time==21], FUN = median), y=weightgain)) + geom_boxplot() + expand_limits(y=0)
rm(p)
p <- ggplot(complete, aes(x=Diet[Time==21], y=weightgain[Time==21])) + geom_boxplot()
p
p <- ggplot(complete[complete$Time == 21], aes(x=Diet[Time==21], y=weightgain[Time==21])) + geom_boxplot()
p <- ggplot(complete[Time == 21], aes(x=Diet[Time==21], y=weightgain[Time==21])) + geom_boxplot()
p <- ggplot(complete$Time == 21, aes(x=Diet[Time==21], y=weightgain[Time==21])) + geom_boxplot()
p <- ggplot(complete$Time == 21, aes(x=Diet, y=weightgain)) + geom_boxplot()
toGraph <- complete[complete$Time == 21,]
toGraph
p <- ggplot(toGraph, aes(x=reorder(Diet, weightgain, FUN = median), y=weightgain)) + geom_boxplot() + expand_limits(y=0)
p
p <- p + xlab("Diet") + ylab("Weight Gain") + ggtitle(Weight Gain by Diet (Ordered by Median Weight Gain))
p <- p + xlab("Diet") + ylab("Weight Gain") + ggtitle(Weight Gain by Diet (Ordered by Median Weight Gain)"")
p <- p + xlab("Diet") + ylab("Weight Gain") + ggtitle(Weight Gain by Diet (Ordered by Median Weight Gain)")
p <- p + xlab("Diet") + ylab("Weight Gain") + ggtitle("Weight Gain by Diet (Ordered by Median Weight Gain)")
toGraph <- complete[complete$Time == 21,] # subset the data by Time == 21
p <- ggplot(toGraph, aes(x=reorder(Diet, weightgain, FUN = median), y=weightgain)) + geom_boxplot() + expand_limits(y=0)
p <- p + xlab("Diet") + ylab("Weight Gain (Day 21)") + ggtitle("Weight Gain by Diet (Ordered by Median Weight Gain)")
p <- p + theme(plot.title = element_text(hjust=0.5))
p
head(toGraph, 5)
p <- ggplot(day21, aes(x=Chick, y=weight)) + geom_bar(stat="identity")
day21 <- toGraph
p <- ggplot(day21, aes(x=Chick, y=weight)) + geom_bar(stat="identity")
p
p <- ggplot(day21, aes(x=Chick, y=weight)) + geom_box()
p <- ggplot(day21, aes(x=Chick, y=weight)) + geom_boxplot()
p
p <- ggplot(day21, aes(x=Chick, y=weight)) + geom_point()
p
p <- ggplot(day21, aes(x=Chick, y=weight)) + geom_point() + scale_x_continuous(breaks = seq(0,50,2))
p
p <- ggplot(day21, aes(x=Chick, y=weight)) + geom_point() + scale_x_continuous(breaks = seq(0,50,by = 5))
p
day21$Chick = as.numeric(levels(day21$Chick))[day21$Chick]
p <- ggplot(day21, aes(x=Chick, y=weight)) + geom_point() + scale_x_continuous(breaks = seq(0,50,by = 5))
p
p <- ggplot(day21, aes(x=Chick, y=weight)) + geom_point() + scale_x_continuous(breaks = seq(0,50,by = 5))
p <- p + geom_text(data=subset(day21, weight > 350 | weight < 75), aes(Chick, weight, label="Diet" + Diet), nudge_x = 1.0)
p
# using day21 dataframe again
# numerical summary
most <- day21 %>% arrange(desc(weight))
least <- day21 %>% arrange(weight)
head(most, 1) # Chick 35 gained most weight on Diet 3
head(least, 1) # Chick 24 gained least weight on Diet 2
# graphical summary
day21$Chick = as.numeric(levels(day21$Chick))[day21$Chick] # change factor to numeric
p <- ggplot(day21, aes(x=Chick, y=weight)) + geom_point() + scale_x_continuous(breaks = seq(0,50,by = 2)) + expand_limits(y=0)
p <- p + geom_label(aes(label=day21$Diet), label.padding=unit(0.10, "lines")) + ggtitle("Weight Gain by Chick (Labeled by Diet)")
p <- p + theme(plot.title = element_text(hjust=0.5)) + xlab("Weight Gain")
p
# You can see that the highest/lowest gaining chicks and their diets are the same on the graph and numeric representation
day21$Chick = as.numeric(levels(day21$Chick))[day21$Chick] # change factor to numeric
p <- ggplot(day21, aes(x=Chick, y=weight)) + geom_point() + scale_x_continuous(breaks = seq(0,50,by = 2)) + expand_limits(y=0)
p <- p + geom_label(aes(label=day21$Diet), label.padding=unit(0.10, "lines")) + ggtitle("Weight Gain by Chick (Labeled by Diet)")
p <- p + theme(plot.title = element_text(hjust=0.5)) + xlab("Weight Gain")
p
day21 <- complete[complete$Time == 21,] # subset the data by Time == 21
p <- ggplot(day21, aes(x=reorder(Diet, weightgain, FUN = median), y=weightgain)) + geom_boxplot() + expand_limits(y=0)
p <- p + xlab("Diet") + ylab("Weight Gain (Day 21)") + ggtitle("Weight Gain by Diet (Ordered by Median Weight Gain)")
p <- p + theme(plot.title = element_text(hjust=0.5))
p # display graph
day21$Chick = as.numeric(levels(day21$Chick))[day21$Chick] # change factor to numeric
p <- ggplot(day21, aes(x=Chick, y=weight)) + geom_point() + scale_x_continuous(breaks = seq(0,50,by = 2)) + expand_limits(y=0)
p <- p + geom_label(aes(label=day21$Diet), label.padding=unit(0.10, "lines")) + ggtitle("Weight Gain by Chick (Labeled by Diet)")
p <- p + theme(plot.title = element_text(hjust=0.5)) + xlab("Weight Gain")
p
day0 <- complete[complete$Time == 0,]
day0 <- complete[complete$Time == 0,] # using this to find heaviest and lightest starting weights
heavy <- day0 %>% arrange(desc(weight))
light <- day0 %>% arrange(weight)
head(heavy, 1) # heaviest starting weight (Chick 3)
head(light, 1) # lightest starting weight (Chick 27)
p <- ggplot(complete, aes(x=Time, y=weight, group = Chick[Chick == 3 || Chick == 27])) + geom_line() + geom_point()
p
p <- ggplot(complete, aes(x=Time, y=weight, group = Chick)) + geom_line() + geom_point()
p
p <- ggplot(complete, aes(x=Time, y=weight, group = complete$Chick==3)) + geom_line() + geom_point()
p
p <- ggplot(complete, aes(x=Time, y=weight, group = Chick==3)) + geom_line() + geom_point()
p
p
p <- ggplot(complete, aes(x=Time, y=weight, group = Chick==3 | Chick==27)) + geom_line() + geom_point()
p
p <- ggplot(complete, aes(x=Time, y=weight, group = Chick)) + geom_line() + geom_point()
p
head(complete, 13)
avg <- complete %>% group_by(Time) %>% summarise(avgWeight = mean(weight))
head(avg, 13)
avg <- complete %>% group_by(Time) %>% mutate(avgWeight = mean(weight))
avg
avg <- complete %>% group_by(Time) %>% mutate(weight = mean(weight))
avg
rm(avg)
avg <- complete %>% group_by(Time) %>% mutate(avgWeight = mean(weight))
avg
avg <- avg[c(1:12)]
avg <- avg[c(1, 1:12)]
temp <- complete
head(temp, 5)
head(avg, 5)
temp <- rbind(temp, avg %>% select(weight:Diet, avgWeight))
temp
rm(temp)
avg <- avg %>% select(weight:Diet, avgWeight)
avg
head(avg, 13)
avg <- complete %>% group_by(Time) %>% mutate(avgWeight = mean(weight)) %>% select(weight:Diet, avgWeight)
avg
temp <- complete
temp[nrow(temp) + 1,] <- list(41.1, 0, 100, 0)
temp$Chick = as.numeric(levels(temp$Chick))[temp$Chick]
temp[nrow(temp) + 1,] <- list(41.1, 0, 100, 0)
temp[nrow(temp) + 1,] <- list(41.1, 0, 100, 5)
rm(temp)
temp <- complete
temp %>% add_row(weight=41.1,Time=0,Chick=100,Diet=0)
ungroup(temp)
temp %>% add_row(weight=41.1,Time=0,Chick=100,Diet=0)
ungroup(temp)
temp %>% add_row(weight=41.1,Time=0,Chick=100,Diet=0)
temp %>% add_row(weight=41.1,Time=0,Chick=100,Diet=0)
avg
sub <- avg[avg$Chick == 1,]
sub
sub <- sub %>% select(Time:avgWeight)
sub
sub <- sub[c("avgWeight", "Time", "Chick", "Diet")]
sub
colnames(sub)[2] <- "weight"
sub
colnames(sub)[2] <- "Time"
colnames(sub)[1] <- "weight"
sub
sub$Chick <- 100
sub
sub$Diet <- 5
sub
temp <- complete
combined <- rbind(as.matrix(temp), as.matrix(sub))
head(temp, 5)
temp <- temp %>% select(weight:Diet)
combined <- rbind(as.matrix(temp), as.matrix(sub))
combined
combined$weight = as.numeric(levels(combined$Chick))[combined$Chick]
str(combined)
type(combined)
class(combined)
combined <- as.data.frame(as.table(combined))
class(combined)
head(class, 5)
head(combined, 5)
rm(combined)
temp <- complete %>% select(weight:Diet)
class(temp)
combo <- merge(temp, sub, by=c("weight", "Time", "Chick"))
combo <- merge(temp, sub, by=c("weight", "Time", "Chick"), stringsAsFactors=FALSE)
temp <- complete
head(avg, 12)
head(temp, 5)
temp$Diet <- as.character(temp$Diet)
head(temp, 5)
temp$Diet <- as.numeric(temp$Diet)
head(temp, 5)
unorder(temp$Chick)
temp <- temp %>% unorder(temp$Chick)
temp <- factor(temp, ordered=FALSE)
head(avg, 5)
temp <- complete
head(temp, 5)
temp <- temp %>% select(weight:Diet)
avg <- complete %>% group_by(Time) %>% mutate(avgWeight = mean(weight)) %>% select(weight:Diet, avgWeight)
if (avg$Chick)
if (avg$Chick == 1)
avg[avg$Chick == 1] <- avg$avgWeight
if (avg$Chick == 1)
avg$weight <- avg$avgWeight
if(avg[avg$Chick == 1])
avg[avg$weight] <- avg[avg$avgWeight]
temp <- subset(avg, Chick == 1)
temp
head(avg, 5)
head(ag)
head(avg)
avg <- complete %>% group_by(Time) %>% mutate(avgWeight = mean(weight)) %>% select(weight:Diet, avgWeight)
head(avg)
avg[weight]
avg$weight[avg$Chick == 1] <- avg$avgWeight[avg$Chick == 1]
head(avg, 12)
head(avg, 13)
p <- ggplot(avg[avg$Chick == 1 | avg$Chick == 3 | avg$Chick == 27], aes(x=Time, y=weight)) + geom_line() + geom_point()
p <- ggplot(avg, Chick ==)
p <- ggplot(avg, Chick %in% c(1, 3, 27))
p <- ggplot(avg, avg$Chick %in% c(1, 3, 27))
p <- ggplot(avg, Chick %in% c(1, 3, 27)) + geom_line(aes(Time, weight), subset= .(Chick %in% c(1, 3, 27)))
p <- ggplot(avg, Chick %in% c(1, 3, 27)) + geom_line(aes(Time, weight), subset= .(avg$Chick %in% c(1, 3, 27)))
p <- ggplot(subset(avg, Chick %in% c(1, 3, 27))) + geom_line(aes(x=Time, y=weight))
p
p <- ggplot(subset(avg, (Chick == 1 | Chick == 3 | Chick == 27)) + geom_line(aes(x=Time, y=weight))
)
p <- ggplot(subset(avg, (Chick == 1 | Chick == 3 | Chick == 27))) + geom_line(aes(x=Time, y=weight))
p
toGraph <- avg[avg$Chick == 1 | avg$Chick == 3 | avg$Chick == 27]
toGraph <- subset(avg, Chick == 1 | Chick == 3 | Chick == 27)
toGraph
p <- ggplot(toGraph, aes(x=Time, y=weight, group=Chick)) + geom_line(aes(color=Chick)) + geom_point(aes(color=Chick))
p
toGraph$Chick[toGraph$Chick == 1] <- "Avg"
toGraph$Chick[toGraph$Chick == 1] <- as.numeric("Avg")
p <- ggplot(toGraph, aes(x=Time, y=weight, group=Chick)) + geom_line(aes(color=Chick)) + geom_point(aes(color=Chick))
p <- p + theme_classic() + ylab("Weight")
p <- p + ggtitle("Avg Weight Gain (Note Chick 1 = Avg Weight Gain)") + theme(plot.title = element_text(hjust=0.5))
p
toGraph <- subset(avg, Chick == 1 | Chick == 3 | Chick == 27) # Subset data into what I need
p <- ggplot(toGraph, aes(x=Time, y=weight, group=Chick)) + geom_line(aes(color=Chick)) + geom_point(aes(color=Chick))
p <- p + theme_classic() + ylab("Weight")
p <- p + ggtitle("Avg Weight Gain (Note Chick 1 = Avg Weight Gain)") + theme(plot.title = element_text(hjust=0.5))
p
head(data, 5)
avg
avg <- avg[avg$Chick == 1]
avg <- subset(avg, Chick == 1)
avg
complete <- complete %>% group_by(Chick) %>% mutate(weightgain = (weight - weight[Time == 0]))
head(complete, 13)
complete <- complete %>% group_by(Time) %>% mutate(avgGain = mean(weightgain))
head(complete(20))
head(complete, 20)
complete <- complete %>% group_by(Time) %>% mutate(dailyGain = weightgain - lag(weightgain, default = first(weightgain)))
complete
complete <- complete %>% group_by(Time)
temp <- complete
temp <- mutate(temp, prev=lag(weightgain))
temp
temp <- mutate(temp, prev=lead(weightgain))
temp
temp <- temp %>% group_by(Chick) %>% mutate(next.day = lead(weightgain))
temp
complete <- temp %>% select(weight:avgGain, next.day)
complete
complete <- complete %>% mutate(dailyGain = next.day - weightgain)
complete
complete <- complete %>% mutate(avgDailyGain = mean(dailyGain))
complete
complete <- complete[complete$next.day != NA]
complete <- subset(complete, next.day != NA)
complete
head(complete, 5)
rm(complete)
complete <- complete %>% group_by(Chick) %>% mutate(weightgain = (weight - weight[Time == 0]))
complete <- temp[temp$NumMeasures == 12,] # if 12 measurements, the data is complete
complete <- complete %>% select(weight:Diet) # do not need the 'NumMeasures' column, it was just a helper column
temp <- data %>% group_by(Chick) %>% mutate(NumMeasures = n())
complete <- temp[temp$NumMeasures == 12,] # if 12 measurements, the data is complete
complete <- complete %>% select(weight:Diet) # do not need the 'NumMeasures' column, it was just a helper column
complete <- complete %>% group_by(Chick) %>% mutate(weightgain = (weight - weight[Time == 0]))
# Using the 'complete' data frame, where weightgain is an added column
complete <- complete %>% group_by(Chick) %>% mutate(weightgain = (weight - weight[Time == 0]))
complete <- complete %>% group_by(Time) %>% mutate(avgGain = mean(weightgain)) # created avg gain column
# a density plot will give a good idea of the growth rate here
p <- ggplot(complete, aes(x=avgGain)) + geom_density(color="darkblue", fill="lightblue")
p <- p + ggtitle("Avg Weight Gain Density Plot") + theme(plot.title = element_text(hjust=0.5))
p
v <- c('A','A','A','A','B','B','B','B','B','B','C','C','C','D','D')
table(v)
sum(v=='D')
setwd('C:/bgannon/Spring2019/DS202/Lab4')
# Preliminary libraries and importing data
library("tidyverse")
library("readxl") # to import Excel file
defense <- read_excel("cyclonesFootball2018.xlsx", sheet="Defensive")
offense <- read_excel("cyclonesFootball2018.xlsx", sheet="Offensive")
biography <- read_excel("cyclonesFootball2018.xlsx", sheet="Biography")
# Player names and opponent names as factors
defense$Name <- as.factor(defense$Name)
defense$Opponent_Opponent <- as.factor(defense$Opponent_Opponent)
offense$Name <- as.factor(offense$Name)
offense$Opponent_Opponent <- as.factor(offense$Opponent_Opponent)
biography$Name <- as.factor(biography$Name)
# All offensive and defensive statistics are numeric. Weight column in biography is also numeric.
defense <- defense %>% mutate_at(c('Tackles_Solo','Tackles_ASST','Tackles_TFL','Tackles_Sack','Turnover_FF','Turnover_FR','Turnover_INT','Pass_QBH','Pass_PB'), as.numeric)
offense <- offense %>% mutate_at(c('Receiving_REC','Receiving_YDS','Receiving_TD','Rushing_ATT','Rushing_YDS','Rushing_TD','Passing_CMP-ATT','Passing_YDS'), as.numeric)
biography$Weight <- as.numeric(biography$Weight)
# Change Height column in biography into numeric (using a unit that works well)
biography$Height <- sapply(strsplit(as.character(biography$Height), '-'), function(x){12*as.numeric(x[1]) + as.numeric(x[2])})
# The measurement is now in total inches
defClean <- defense
offClean <- offense
bioClean <- biography
# Reformat defClean dataframe into a tidy format using gather
# I essentially narrowed the dataframe by grouping all defensive statistics by name
defClean <- gather(defClean, key='Statistic', value='Amount', Tackles_Solo:Pass_PB, na.rm=TRUE)
# Create histogram for each defensive statistic (using facet wrap)
p <- ggplot(defClean, aes(x=Amount)) + geom_histogram(bins=10) + facet_wrap(~defClean$Statistic)
p <- p + xlab("Value of Statistic") + ylab('Occurences') + ggtitle('Amount of Occurences per Defensive Statistic')
p
# Did ISU have better defense against West Virginia or Kansas State?
WVU <- filter(defClean, Opponent_Opponent == 'West Virginia')
WVU <- filter(WVU, Statistic == 'Tackles_Solo')
KSU <- filter(defClean, Opponent_Opponent == 'Kansas State')
KSU <- filter(KSU, Statistic == 'Tackles_Solo')
# Can now plot with these two dataframes
# FINISH THIS PART (ask after 3/26 class)
# Separate Hometown column into two columns (city and state). Print first few rows of these two columns
bioClean <- separate(bioClean, Hometown, c('City', 'State'), ', ')
head(bioClean, 3)
# How many players are from each state?
p <- ggplot(bioClean, aes(x=State, color=State)) + geom_bar() + theme(axis.text.x = element_text(angle = 90))
p <- p + ylab('Number of Players') + ggtitle('Number of ISU Football Players by State')
p # Much more players from Iowa than I expected
